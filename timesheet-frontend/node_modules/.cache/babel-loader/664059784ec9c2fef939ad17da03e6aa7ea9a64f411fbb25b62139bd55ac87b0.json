{"ast":null,"code":"import { warnOnce, SubscriptionManager, velocityPerSecond } from 'motion-utils';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\n/**\r\n * Maximum time between the value of two frames, beyond which we\r\n * assume the velocity has since been 0.\r\n */\nconst MAX_VELOCITY_DELTA = 30;\nconst isFloat = value => {\n  return !isNaN(parseFloat(value));\n};\nconst collectMotionValues = {\n  current: undefined\n};\n/**\r\n * `MotionValue` is used to track the state and velocity of motion values.\r\n *\r\n * @public\r\n */\nclass MotionValue {\n  /**\r\n   * @param init - The initiating value\r\n   * @param config - Optional configuration options\r\n   *\r\n   * -  `transformer`: A function to transform incoming values with.\r\n   */\n  constructor(init) {\n    var _this = this;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /**\r\n     * Tracks whether this value can output a velocity. Currently this is only true\r\n     * if the value is numerical, but we might be able to widen the scope here and support\r\n     * other value types.\r\n     *\r\n     * @internal\r\n     */\n    this.canTrackVelocity = null;\n    /**\r\n     * An object containing a SubscriptionManager for each active event.\r\n     */\n    this.events = {};\n    this.updateAndNotify = function (v) {\n      let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const currentTime = time.now();\n      /**\r\n       * If we're updating the value during another frame or eventloop\r\n       * than the previous frame, then the we set the previous frame value\r\n       * to current.\r\n       */\n      if (_this.updatedAt !== currentTime) {\n        _this.setPrevFrameValue();\n      }\n      _this.prev = _this.current;\n      _this.setCurrent(v);\n      // Update update subscribers\n      if (_this.current !== _this.prev) {\n        var _this$events$change;\n        (_this$events$change = _this.events.change) === null || _this$events$change === void 0 || _this$events$change.notify(_this.current);\n        if (_this.dependents) {\n          for (const dependent of _this.dependents) {\n            dependent.dirty();\n          }\n        }\n      }\n      // Update render subscribers\n      if (render) {\n        var _this$events$renderRe;\n        (_this$events$renderRe = _this.events.renderRequest) === null || _this$events$renderRe === void 0 || _this$events$renderRe.notify(_this.current);\n      }\n    };\n    this.hasAnimated = false;\n    this.setCurrent(init);\n    this.owner = options.owner;\n  }\n  setCurrent(current) {\n    this.current = current;\n    this.updatedAt = time.now();\n    if (this.canTrackVelocity === null && current !== undefined) {\n      this.canTrackVelocity = isFloat(this.current);\n    }\n  }\n  setPrevFrameValue() {\n    let prevFrameValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.current;\n    this.prevFrameValue = prevFrameValue;\n    this.prevUpdatedAt = this.updatedAt;\n  }\n  /**\r\n   * Adds a function that will be notified when the `MotionValue` is updated.\r\n   *\r\n   * It returns a function that, when called, will cancel the subscription.\r\n   *\r\n   * When calling `onChange` inside a React component, it should be wrapped with the\r\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\r\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\r\n   *\r\n   * ```jsx\r\n   * export const MyComponent = () => {\r\n   *   const x = useMotionValue(0)\r\n   *   const y = useMotionValue(0)\r\n   *   const opacity = useMotionValue(1)\r\n   *\r\n   *   useEffect(() => {\r\n   *     function updateOpacity() {\r\n   *       const maxXY = Math.max(x.get(), y.get())\r\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n   *       opacity.set(newOpacity)\r\n   *     }\r\n   *\r\n   *     const unsubscribeX = x.on(\"change\", updateOpacity)\r\n   *     const unsubscribeY = y.on(\"change\", updateOpacity)\r\n   *\r\n   *     return () => {\r\n   *       unsubscribeX()\r\n   *       unsubscribeY()\r\n   *     }\r\n   *   }, [])\r\n   *\r\n   *   return <motion.div style={{ x }} />\r\n   * }\r\n   * ```\r\n   *\r\n   * @param subscriber - A function that receives the latest value.\r\n   * @returns A function that, when called, will cancel this subscription.\r\n   *\r\n   * @deprecated\r\n   */\n  onChange(subscription) {\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(false, \"value.onChange(callback) is deprecated. Switch to value.on(\\\"change\\\", callback).\");\n    }\n    return this.on(\"change\", subscription);\n  }\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n    const unsubscribe = this.events[eventName].add(callback);\n    if (eventName === \"change\") {\n      return () => {\n        unsubscribe();\n        /**\r\n         * If we have no more change listeners by the start\r\n         * of the next frame, stop active animations.\r\n         */\n        frame.read(() => {\n          if (!this.events.change.getSize()) {\n            this.stop();\n          }\n        });\n      };\n    }\n    return unsubscribe;\n  }\n  clearListeners() {\n    for (const eventManagers in this.events) {\n      this.events[eventManagers].clear();\n    }\n  }\n  /**\r\n   * Attaches a passive effect to the `MotionValue`.\r\n   */\n  attach(passiveEffect, stopPassiveEffect) {\n    this.passiveEffect = passiveEffect;\n    this.stopPassiveEffect = stopPassiveEffect;\n  }\n  /**\r\n   * Sets the state of the `MotionValue`.\r\n   *\r\n   * @remarks\r\n   *\r\n   * ```jsx\r\n   * const x = useMotionValue(0)\r\n   * x.set(10)\r\n   * ```\r\n   *\r\n   * @param latest - Latest value to set.\r\n   * @param render - Whether to notify render subscribers. Defaults to `true`\r\n   *\r\n   * @public\r\n   */\n  set(v) {\n    let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!render || !this.passiveEffect) {\n      this.updateAndNotify(v, render);\n    } else {\n      this.passiveEffect(v, this.updateAndNotify);\n    }\n  }\n  setWithVelocity(prev, current, delta) {\n    this.set(current);\n    this.prev = undefined;\n    this.prevFrameValue = prev;\n    this.prevUpdatedAt = this.updatedAt - delta;\n  }\n  /**\r\n   * Set the state of the `MotionValue`, stopping any active animations,\r\n   * effects, and resets velocity to `0`.\r\n   */\n  jump(v) {\n    let endAnimation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.updateAndNotify(v);\n    this.prev = v;\n    this.prevUpdatedAt = this.prevFrameValue = undefined;\n    endAnimation && this.stop();\n    if (this.stopPassiveEffect) this.stopPassiveEffect();\n  }\n  dirty() {\n    var _this$events$change2;\n    (_this$events$change2 = this.events.change) === null || _this$events$change2 === void 0 || _this$events$change2.notify(this.current);\n  }\n  addDependent(dependent) {\n    if (!this.dependents) {\n      this.dependents = new Set();\n    }\n    this.dependents.add(dependent);\n  }\n  removeDependent(dependent) {\n    if (this.dependents) {\n      this.dependents.delete(dependent);\n    }\n  }\n  /**\r\n   * Returns the latest state of `MotionValue`\r\n   *\r\n   * @returns - The latest state of `MotionValue`\r\n   *\r\n   * @public\r\n   */\n  get() {\n    if (collectMotionValues.current) {\n      collectMotionValues.current.push(this);\n    }\n    return this.current;\n  }\n  /**\r\n   * @public\r\n   */\n  getPrevious() {\n    return this.prev;\n  }\n  /**\r\n   * Returns the latest velocity of `MotionValue`\r\n   *\r\n   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\r\n   *\r\n   * @public\r\n   */\n  getVelocity() {\n    const currentTime = time.now();\n    if (!this.canTrackVelocity || this.prevFrameValue === undefined || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\n      return 0;\n    }\n    const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\n    // Casts because of parseFloat's poor typing\n    return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);\n  }\n  /**\r\n   * Registers a new animation to control this `MotionValue`. Only one\r\n   * animation can drive a `MotionValue` at one time.\r\n   *\r\n   * ```jsx\r\n   * value.start()\r\n   * ```\r\n   *\r\n   * @param animation - A function that starts the provided animation\r\n   */\n  start(startAnimation) {\n    this.stop();\n    return new Promise(resolve => {\n      this.hasAnimated = true;\n      this.animation = startAnimation(resolve);\n      if (this.events.animationStart) {\n        this.events.animationStart.notify();\n      }\n    }).then(() => {\n      if (this.events.animationComplete) {\n        this.events.animationComplete.notify();\n      }\n      this.clearAnimation();\n    });\n  }\n  /**\r\n   * Stop the currently active animation.\r\n   *\r\n   * @public\r\n   */\n  stop() {\n    if (this.animation) {\n      this.animation.stop();\n      if (this.events.animationCancel) {\n        this.events.animationCancel.notify();\n      }\n    }\n    this.clearAnimation();\n  }\n  /**\r\n   * Returns `true` if this value is currently animating.\r\n   *\r\n   * @public\r\n   */\n  isAnimating() {\n    return !!this.animation;\n  }\n  clearAnimation() {\n    delete this.animation;\n  }\n  /**\r\n   * Destroy and clean up subscribers to this `MotionValue`.\r\n   *\r\n   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\r\n   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\r\n   * created a `MotionValue` via the `motionValue` function.\r\n   *\r\n   * @public\r\n   */\n  destroy() {\n    var _this$dependents, _this$events$destroy;\n    (_this$dependents = this.dependents) === null || _this$dependents === void 0 || _this$dependents.clear();\n    (_this$events$destroy = this.events.destroy) === null || _this$events$destroy === void 0 || _this$events$destroy.notify();\n    this.clearListeners();\n    this.stop();\n    if (this.stopPassiveEffect) {\n      this.stopPassiveEffect();\n    }\n  }\n}\nfunction motionValue(init, options) {\n  return new MotionValue(init, options);\n}\nexport { MotionValue, collectMotionValues, motionValue };","map":{"version":3,"names":["warnOnce","SubscriptionManager","velocityPerSecond","time","frame","MAX_VELOCITY_DELTA","isFloat","value","isNaN","parseFloat","collectMotionValues","current","undefined","MotionValue","constructor","init","_this","options","arguments","length","canTrackVelocity","events","updateAndNotify","v","render","currentTime","now","updatedAt","setPrevFrameValue","prev","setCurrent","_this$events$change","change","notify","dependents","dependent","dirty","_this$events$renderRe","renderRequest","hasAnimated","owner","prevFrameValue","prevUpdatedAt","onChange","subscription","process","env","NODE_ENV","on","eventName","callback","unsubscribe","add","read","getSize","stop","clearListeners","eventManagers","clear","attach","passiveEffect","stopPassiveEffect","set","setWithVelocity","delta","jump","endAnimation","_this$events$change2","addDependent","Set","removeDependent","delete","get","push","getPrevious","getVelocity","Math","min","start","startAnimation","Promise","resolve","animation","animationStart","then","animationComplete","clearAnimation","animationCancel","isAnimating","destroy","_this$dependents","_this$events$destroy","motionValue"],"sources":["C:/Users/pondz/OneDrive/เอกสาร/Github/TimeSheetForStudent-test001/TimeSheetForStudent/timesheet-frontend/node_modules/motion-dom/dist/es/value/index.mjs"],"sourcesContent":["import { warnOnce, SubscriptionManager, velocityPerSecond } from 'motion-utils';\r\nimport { time } from '../frameloop/sync-time.mjs';\r\nimport { frame } from '../frameloop/frame.mjs';\r\n\r\n/**\r\n * Maximum time between the value of two frames, beyond which we\r\n * assume the velocity has since been 0.\r\n */\r\nconst MAX_VELOCITY_DELTA = 30;\r\nconst isFloat = (value) => {\r\n    return !isNaN(parseFloat(value));\r\n};\r\nconst collectMotionValues = {\r\n    current: undefined,\r\n};\r\n/**\r\n * `MotionValue` is used to track the state and velocity of motion values.\r\n *\r\n * @public\r\n */\r\nclass MotionValue {\r\n    /**\r\n     * @param init - The initiating value\r\n     * @param config - Optional configuration options\r\n     *\r\n     * -  `transformer`: A function to transform incoming values with.\r\n     */\r\n    constructor(init, options = {}) {\r\n        /**\r\n         * Tracks whether this value can output a velocity. Currently this is only true\r\n         * if the value is numerical, but we might be able to widen the scope here and support\r\n         * other value types.\r\n         *\r\n         * @internal\r\n         */\r\n        this.canTrackVelocity = null;\r\n        /**\r\n         * An object containing a SubscriptionManager for each active event.\r\n         */\r\n        this.events = {};\r\n        this.updateAndNotify = (v, render = true) => {\r\n            const currentTime = time.now();\r\n            /**\r\n             * If we're updating the value during another frame or eventloop\r\n             * than the previous frame, then the we set the previous frame value\r\n             * to current.\r\n             */\r\n            if (this.updatedAt !== currentTime) {\r\n                this.setPrevFrameValue();\r\n            }\r\n            this.prev = this.current;\r\n            this.setCurrent(v);\r\n            // Update update subscribers\r\n            if (this.current !== this.prev) {\r\n                this.events.change?.notify(this.current);\r\n                if (this.dependents) {\r\n                    for (const dependent of this.dependents) {\r\n                        dependent.dirty();\r\n                    }\r\n                }\r\n            }\r\n            // Update render subscribers\r\n            if (render) {\r\n                this.events.renderRequest?.notify(this.current);\r\n            }\r\n        };\r\n        this.hasAnimated = false;\r\n        this.setCurrent(init);\r\n        this.owner = options.owner;\r\n    }\r\n    setCurrent(current) {\r\n        this.current = current;\r\n        this.updatedAt = time.now();\r\n        if (this.canTrackVelocity === null && current !== undefined) {\r\n            this.canTrackVelocity = isFloat(this.current);\r\n        }\r\n    }\r\n    setPrevFrameValue(prevFrameValue = this.current) {\r\n        this.prevFrameValue = prevFrameValue;\r\n        this.prevUpdatedAt = this.updatedAt;\r\n    }\r\n    /**\r\n     * Adds a function that will be notified when the `MotionValue` is updated.\r\n     *\r\n     * It returns a function that, when called, will cancel the subscription.\r\n     *\r\n     * When calling `onChange` inside a React component, it should be wrapped with the\r\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\r\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\r\n     *\r\n     * ```jsx\r\n     * export const MyComponent = () => {\r\n     *   const x = useMotionValue(0)\r\n     *   const y = useMotionValue(0)\r\n     *   const opacity = useMotionValue(1)\r\n     *\r\n     *   useEffect(() => {\r\n     *     function updateOpacity() {\r\n     *       const maxXY = Math.max(x.get(), y.get())\r\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n     *       opacity.set(newOpacity)\r\n     *     }\r\n     *\r\n     *     const unsubscribeX = x.on(\"change\", updateOpacity)\r\n     *     const unsubscribeY = y.on(\"change\", updateOpacity)\r\n     *\r\n     *     return () => {\r\n     *       unsubscribeX()\r\n     *       unsubscribeY()\r\n     *     }\r\n     *   }, [])\r\n     *\r\n     *   return <motion.div style={{ x }} />\r\n     * }\r\n     * ```\r\n     *\r\n     * @param subscriber - A function that receives the latest value.\r\n     * @returns A function that, when called, will cancel this subscription.\r\n     *\r\n     * @deprecated\r\n     */\r\n    onChange(subscription) {\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on(\"change\", callback).`);\r\n        }\r\n        return this.on(\"change\", subscription);\r\n    }\r\n    on(eventName, callback) {\r\n        if (!this.events[eventName]) {\r\n            this.events[eventName] = new SubscriptionManager();\r\n        }\r\n        const unsubscribe = this.events[eventName].add(callback);\r\n        if (eventName === \"change\") {\r\n            return () => {\r\n                unsubscribe();\r\n                /**\r\n                 * If we have no more change listeners by the start\r\n                 * of the next frame, stop active animations.\r\n                 */\r\n                frame.read(() => {\r\n                    if (!this.events.change.getSize()) {\r\n                        this.stop();\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        return unsubscribe;\r\n    }\r\n    clearListeners() {\r\n        for (const eventManagers in this.events) {\r\n            this.events[eventManagers].clear();\r\n        }\r\n    }\r\n    /**\r\n     * Attaches a passive effect to the `MotionValue`.\r\n     */\r\n    attach(passiveEffect, stopPassiveEffect) {\r\n        this.passiveEffect = passiveEffect;\r\n        this.stopPassiveEffect = stopPassiveEffect;\r\n    }\r\n    /**\r\n     * Sets the state of the `MotionValue`.\r\n     *\r\n     * @remarks\r\n     *\r\n     * ```jsx\r\n     * const x = useMotionValue(0)\r\n     * x.set(10)\r\n     * ```\r\n     *\r\n     * @param latest - Latest value to set.\r\n     * @param render - Whether to notify render subscribers. Defaults to `true`\r\n     *\r\n     * @public\r\n     */\r\n    set(v, render = true) {\r\n        if (!render || !this.passiveEffect) {\r\n            this.updateAndNotify(v, render);\r\n        }\r\n        else {\r\n            this.passiveEffect(v, this.updateAndNotify);\r\n        }\r\n    }\r\n    setWithVelocity(prev, current, delta) {\r\n        this.set(current);\r\n        this.prev = undefined;\r\n        this.prevFrameValue = prev;\r\n        this.prevUpdatedAt = this.updatedAt - delta;\r\n    }\r\n    /**\r\n     * Set the state of the `MotionValue`, stopping any active animations,\r\n     * effects, and resets velocity to `0`.\r\n     */\r\n    jump(v, endAnimation = true) {\r\n        this.updateAndNotify(v);\r\n        this.prev = v;\r\n        this.prevUpdatedAt = this.prevFrameValue = undefined;\r\n        endAnimation && this.stop();\r\n        if (this.stopPassiveEffect)\r\n            this.stopPassiveEffect();\r\n    }\r\n    dirty() {\r\n        this.events.change?.notify(this.current);\r\n    }\r\n    addDependent(dependent) {\r\n        if (!this.dependents) {\r\n            this.dependents = new Set();\r\n        }\r\n        this.dependents.add(dependent);\r\n    }\r\n    removeDependent(dependent) {\r\n        if (this.dependents) {\r\n            this.dependents.delete(dependent);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the latest state of `MotionValue`\r\n     *\r\n     * @returns - The latest state of `MotionValue`\r\n     *\r\n     * @public\r\n     */\r\n    get() {\r\n        if (collectMotionValues.current) {\r\n            collectMotionValues.current.push(this);\r\n        }\r\n        return this.current;\r\n    }\r\n    /**\r\n     * @public\r\n     */\r\n    getPrevious() {\r\n        return this.prev;\r\n    }\r\n    /**\r\n     * Returns the latest velocity of `MotionValue`\r\n     *\r\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\r\n     *\r\n     * @public\r\n     */\r\n    getVelocity() {\r\n        const currentTime = time.now();\r\n        if (!this.canTrackVelocity ||\r\n            this.prevFrameValue === undefined ||\r\n            currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {\r\n            return 0;\r\n        }\r\n        const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);\r\n        // Casts because of parseFloat's poor typing\r\n        return velocityPerSecond(parseFloat(this.current) -\r\n            parseFloat(this.prevFrameValue), delta);\r\n    }\r\n    /**\r\n     * Registers a new animation to control this `MotionValue`. Only one\r\n     * animation can drive a `MotionValue` at one time.\r\n     *\r\n     * ```jsx\r\n     * value.start()\r\n     * ```\r\n     *\r\n     * @param animation - A function that starts the provided animation\r\n     */\r\n    start(startAnimation) {\r\n        this.stop();\r\n        return new Promise((resolve) => {\r\n            this.hasAnimated = true;\r\n            this.animation = startAnimation(resolve);\r\n            if (this.events.animationStart) {\r\n                this.events.animationStart.notify();\r\n            }\r\n        }).then(() => {\r\n            if (this.events.animationComplete) {\r\n                this.events.animationComplete.notify();\r\n            }\r\n            this.clearAnimation();\r\n        });\r\n    }\r\n    /**\r\n     * Stop the currently active animation.\r\n     *\r\n     * @public\r\n     */\r\n    stop() {\r\n        if (this.animation) {\r\n            this.animation.stop();\r\n            if (this.events.animationCancel) {\r\n                this.events.animationCancel.notify();\r\n            }\r\n        }\r\n        this.clearAnimation();\r\n    }\r\n    /**\r\n     * Returns `true` if this value is currently animating.\r\n     *\r\n     * @public\r\n     */\r\n    isAnimating() {\r\n        return !!this.animation;\r\n    }\r\n    clearAnimation() {\r\n        delete this.animation;\r\n    }\r\n    /**\r\n     * Destroy and clean up subscribers to this `MotionValue`.\r\n     *\r\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\r\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\r\n     * created a `MotionValue` via the `motionValue` function.\r\n     *\r\n     * @public\r\n     */\r\n    destroy() {\r\n        this.dependents?.clear();\r\n        this.events.destroy?.notify();\r\n        this.clearListeners();\r\n        this.stop();\r\n        if (this.stopPassiveEffect) {\r\n            this.stopPassiveEffect();\r\n        }\r\n    }\r\n}\r\nfunction motionValue(init, options) {\r\n    return new MotionValue(init, options);\r\n}\r\n\r\nexport { MotionValue, collectMotionValues, motionValue };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}