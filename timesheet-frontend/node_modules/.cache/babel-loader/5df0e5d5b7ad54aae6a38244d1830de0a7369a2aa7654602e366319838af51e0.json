{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kop_k\\\\OneDrive\\\\\\u0E40\\u0E14\\u0E2A\\u0E01\\u0E4C\\u0E17\\u0E47\\u0E2D\\u0E1B\\\\GitHubLS\\\\TimeSheetForStudent\\\\timesheet-frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// สร้าง Context สำหรับเก็บข้อมูล Authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// สร้าง Provider เพื่อห่อแอป หรือ component ต้นทาง เพื่อให้ทุก component ที่อยู่ข้างในใช้งานข้อมูล auth ได้\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // เก็บข้อมูลผู้ใช้ เช่น { id, name, role }\n  const [token, setToken] = useState(null); // เก็บ token ที่ได้จากการ login\n\n  // useEffect รันตอน component โหลดครั้งแรก (mount)\n  // เพื่อดึงข้อมูล token และ user ที่เก็บไว้ใน localStorage (ถ้ามี) มาใช้ต่อ\n  useEffect(() => {\n    const token = localStorage.getItem('token'); // ดึง token จาก localStorage\n    const user = localStorage.getItem('user'); // ดึง user จาก localStorage\n    if (token && user) {\n      setToken(token); // อัพเดต state token\n      setUser(JSON.parse(user)); // แปลง JSON string กลับเป็น object แล้วอัพเดต state user\n    }\n  }, []);\n\n  // ฟังก์ชัน login จะถูกเรียกเมื่อผู้ใช้ล็อกอินสำเร็จ\n  // ทำหน้าที่เก็บ token และ user ลง state และ localStorage\n  const login = (token, user) => {\n    setToken(token);\n    setUser(user);\n    localStorage.setItem('token', token); // เก็บ token ใน localStorage\n    localStorage.setItem('user', JSON.stringify(user)); // แปลง object user เป็น string แล้วเก็บใน localStorage\n  };\n\n  // ฟังก์ชัน logout ล้างข้อมูลผู้ใช้และ token ทั้งใน state และ localStorage\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  };\n\n  // ส่งข้อมูล user, token และฟังก์ชัน login, logout ผ่าน Context ให้ component ลูกใช้งานได้\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook สำหรับเรียกใช้ข้อมูล AuthContext ใน component ต่าง ๆ ได้ง่าย\n_s(AuthProvider, \"cANLe8RtnwDE5y1hInrXoZDdgy8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","JSON","parse","login","setItem","stringify","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/kop_k/OneDrive/เดสก์ท็อป/GitHubLS/TimeSheetForStudent/timesheet-frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// สร้าง Context สำหรับเก็บข้อมูล Authentication\r\nconst AuthContext = createContext();\r\n\r\n// สร้าง Provider เพื่อห่อแอป หรือ component ต้นทาง เพื่อให้ทุก component ที่อยู่ข้างในใช้งานข้อมูล auth ได้\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);   // เก็บข้อมูลผู้ใช้ เช่น { id, name, role }\r\n  const [token, setToken] = useState(null); // เก็บ token ที่ได้จากการ login\r\n\r\n  // useEffect รันตอน component โหลดครั้งแรก (mount)\r\n  // เพื่อดึงข้อมูล token และ user ที่เก็บไว้ใน localStorage (ถ้ามี) มาใช้ต่อ\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token'); // ดึง token จาก localStorage\r\n    const user = localStorage.getItem('user');   // ดึง user จาก localStorage\r\n    if (token && user) {\r\n      setToken(token);            // อัพเดต state token\r\n      setUser(JSON.parse(user));  // แปลง JSON string กลับเป็น object แล้วอัพเดต state user\r\n    }\r\n  }, []);\r\n\r\n  // ฟังก์ชัน login จะถูกเรียกเมื่อผู้ใช้ล็อกอินสำเร็จ\r\n  // ทำหน้าที่เก็บ token และ user ลง state และ localStorage\r\n  const login = (token, user) => {\r\n    setToken(token);\r\n    setUser(user);\r\n    localStorage.setItem('token', token);               // เก็บ token ใน localStorage\r\n    localStorage.setItem('user', JSON.stringify(user)); // แปลง object user เป็น string แล้วเก็บใน localStorage\r\n  };\r\n\r\n  // ฟังก์ชัน logout ล้างข้อมูลผู้ใช้และ token ทั้งใน state และ localStorage\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  // ส่งข้อมูล user, token และฟังก์ชัน login, logout ผ่าน Context ให้ component ลูกใช้งานได้\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook สำหรับเรียกใช้ข้อมูล AuthContext ใน component ต่าง ๆ ได้ง่าย\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAG;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACA;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,KAAK,GAAGE,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7C,MAAML,IAAI,GAAGI,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAG;IAC7C,IAAIH,KAAK,IAAIF,IAAI,EAAE;MACjBG,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAY;MAC5BD,OAAO,CAACK,IAAI,CAACC,KAAK,CAACP,IAAI,CAAC,CAAC,CAAC,CAAE;IAC9B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,MAAMQ,KAAK,GAAGA,CAACN,KAAK,EAAEF,IAAI,KAAK;IAC7BG,QAAQ,CAACD,KAAK,CAAC;IACfD,OAAO,CAACD,IAAI,CAAC;IACbI,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC,CAAC,CAAe;IACpDE,YAAY,CAACK,OAAO,CAAC,MAAM,EAAEH,IAAI,CAACI,SAAS,CAACV,IAAI,CAAC,CAAC,CAAC,CAAC;EACtD,CAAC;;EAED;EACA,MAAMW,MAAM,GAAGA,CAAA,KAAM;IACnBR,QAAQ,CAAC,IAAI,CAAC;IACdF,OAAO,CAAC,IAAI,CAAC;IACbG,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;;EAED;EACA,oBACEjB,OAAA,CAACC,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEd,IAAI;MAAEE,KAAK;MAAEM,KAAK;MAAEG;IAAO,CAAE;IAAAb,QAAA,EACzDA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAnB,EAAA,CAxCaF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAyCzB,OAAO,MAAMuB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM9B,UAAU,CAACK,WAAW,CAAC;AAAA;AAACyB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}