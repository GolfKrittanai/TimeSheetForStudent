const PDFDocument = require('pdfkit');
const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');
const prisma = require('../prismaClient');
const nodemailer = require('nodemailer');
const cron = require('node-cron');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
async function generatePDFReport(data, filePath) {
    return new Promise((resolve, reject) => {
        const doc = new PDFDocument({ margin: 30, size: 'A4' });
        const writeStream = fs.createWriteStream(filePath);
        doc.pipe(writeStream);

        // üëá ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢
        doc.registerFont('THSarabun', path.join(__dirname, '../fonts/THSarabunNew.ttf'));
        doc.font('THSarabun');

        doc.fontSize(18).text('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Timesheet ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ' + new Date().toLocaleDateString(), { align: 'center' });
        doc.moveDown();

        data.forEach(item => {
            doc.fontSize(14).text(
                `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${item.date.toISOString().slice(0, 10)} | ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${item.studentId} | ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á: ${item.hours} | ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${item.activity}`
            );
        });

        doc.end();

        writeStream.on('finish', () => resolve());
        writeStream.on('error', (err) => reject(err));
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Excel ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
async function generateExcelReport(data, filePath) {
    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet('Timesheet Report');

    sheet.columns = [
        { header: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', key: 'date', width: 15 },
        { header: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤', key: 'studentId', width: 20 },
        { header: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á', key: 'hours', width: 15 },
        { header: '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', key: 'activity', width: 40 },
    ];

    data.forEach(item => {
        sheet.addRow({
            date: item.date.toISOString().slice(0, 10),
            studentId: item.studentId,
            hours: item.hours,
            activity: item.activity,
        });
    });

    await workbook.xlsx.writeFile(filePath);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
async function sendEmailWithAttachment(filePath, filename) {
    const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASSWORD,
        },
    });

    await transporter.sendMail({
        from: `"TimeSheet Bot" <${process.env.EMAIL_USER}>`,
        to: process.env.ADMIN_EMAIL,
        subject: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô TimeSheet ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " + new Date().toLocaleDateString(),
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô TimeSheet",
        attachments: [
            {
                filename,
                path: filePath,
            },
        ],
    });
}

// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤ cron job ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 19:00 ‡∏ô.
cron.schedule("0 19 * * *", async () => {
    try {
        const today = new Date();
        const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);
        const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timesheet ‡∏û‡∏£‡πâ‡∏≠‡∏° user relation (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å student ‡πÄ‡∏õ‡πá‡∏ô user ‡∏ï‡∏≤‡∏° schema)
        const timesheets = await prisma.timesheet.findMany({
            where: {
                date: {
                    gte: startOfDay,
                    lte: endOfDay,
                },
            },
            include: {
                user: {
                    select: { studentId: true },
                },
            },
        });

        if (timesheets.length === 0) {
            console.log("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Timesheet ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ");
            return;
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å checkInTime - checkOutTime
        const data = timesheets.map(t => ({
            date: t.date,
            studentId: t.user.studentId,
            hours: ((t.checkOutTime.getTime() - t.checkInTime.getTime()) / (1000 * 60 * 60)).toFixed(2),
            activity: t.activity || "",
        }));

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÑ‡∏ü‡∏•‡πå
        const pdfPath = path.join(__dirname, `timesheet_report_${today.toISOString().slice(0, 10)}.pdf`);
        const excelPath = path.join(__dirname, `timesheet_report_${today.toISOString().slice(0, 10)}.xlsx`);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        await generatePDFReport(data, pdfPath);
        await generateExcelReport(data, excelPath);

        // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö
        await sendEmailWithAttachment(pdfPath, `timesheet_report_${today.toISOString().slice(0, 10)}.pdf`);
        await sendEmailWithAttachment(excelPath, `timesheet_report_${today.toISOString().slice(0, 10)}.xlsx`);

        console.log("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF ‡πÅ‡∏•‡∏∞ Excel ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    } catch (error) {
        console.error("Error cron job:", error);
    }
});
