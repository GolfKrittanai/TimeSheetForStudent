const express = require("express");
const path = require("path");
const router = express.Router();
const prisma = require("../prismaClient");
const PDFDocument = require("pdfkit");
const ExcelJS = require("exceljs");
const thaiFontPath = path.join(__dirname, "../fonts/THSarabunNew.ttf");
const { authenticateToken } = require("../middleware/authMiddleware");
const logger = require("../logger/logger"); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° logger

// üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• timesheet
const fetchTimesheetData = async ({
  startDate,
  endDate,
  isAdmin,
  userId,
  startStudentId,
  endStudentId,
}) => {
  const dateFilter = {
    gte: new Date(startDate),
    lte: new Date(endDate),
  };

  let userIds = [];

  if (isAdmin) {
    if (startStudentId && endStudentId) {
      const users = await prisma.user.findMany({
        where: {
          studentId: {
            gte: startStudentId,
            lte: endStudentId,
          },
        },
        select: { id: true },
      });
      userIds = users.map((u) => u.id);
    } else {
      const users = await prisma.user.findMany({ select: { id: true } });
      userIds = users.map((u) => u.id);
    }
  } else {
    userIds = [userId];
  }

  const timesheets = await prisma.timesheet.findMany({
    where: {
      date: dateFilter,
      userId: { in: userIds },
    },
    include: { user: { select: { studentId: true } } },
    orderBy: { date: "asc" },
  });

  return timesheets.map((t) => ({
    date: t.date,
    studentId: t.user.studentId,
    hours: ((new Date(t.checkOutTime) - new Date(t.checkInTime)) / 3600000).toFixed(2),
    activity: t.activity || "",
  }));
};

// üîπ GET preview
router.get("/timesheets", authenticateToken, async (req, res) => {
  try {
    const { id: userId, role } = req.user;
    const { startDate, endDate, startStudentId, endStudentId } = req.query;

    if (!startDate || !endDate) {
      logger.warn("‚ö†Ô∏è Preview: ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà startDate ‡∏´‡∏£‡∏∑‡∏≠ endDate");
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" });
    }

    const data = await fetchTimesheetData({
      startDate,
      endDate,
      isAdmin: role === "admin",
      userId,
      startStudentId,
      endStudentId,
    });

    logger.info(`üëÅÔ∏è‚Äçüó®Ô∏è Preview ‡πÇ‡∏î‡∏¢ ${role} ID ${userId}, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${startDate} ‡∏ñ‡∏∂‡∏á ${endDate}, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${data.length}`);
    res.json(data);
  } catch (error) {
    logger.error(`‚ùå Error preview timesheet: ${error.message}`);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

// üîπ POST export
router.post("/export", authenticateToken, async (req, res) => {
  try {
    const { id: userId, role } = req.user;
    let { startDate, endDate, startStudentId, endStudentId, format } = req.body;

    if (!startDate || !endDate) {
      logger.warn("‚ö†Ô∏è Export: ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà startDate ‡∏´‡∏£‡∏∑‡∏≠ endDate");
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" });
    }

    if (!["pdf", "excel"].includes(format)) {
      logger.warn(`‚ö†Ô∏è Export: ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${format}`);
      return res.status(400).json({ message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    if (role !== "admin") {
      startStudentId = null;
      endStudentId = null;
    }

    const data = await fetchTimesheetData({
      startDate,
      endDate,
      isAdmin: role === "admin",
      userId,
      startStudentId,
      endStudentId,
    });

    logger.info(`üì§ Export ‡πÇ‡∏î‡∏¢ ${role} ID ${userId}, type: ${format}, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${startDate} - ${endDate}, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${data.length}`);

    if (format === "pdf") {
      const doc = new PDFDocument();
      const buffers = [];
      doc.on("data", buffers.push.bind(buffers));
      doc.on("end", () => {
        const pdfData = Buffer.concat(buffers);
        res.writeHead(200, {
          "Content-Length": Buffer.byteLength(pdfData),
          "Content-Type": "application/pdf",
          "Content-Disposition": `attachment; filename=timesheet_${startDate}_${endDate}.pdf`,
        }).end(pdfData);
      });

      doc.registerFont("THSarabun", thaiFontPath);
      doc.font("THSarabun").fontSize(18).text("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Timesheet", { align: "center" });
      doc.moveDown();

      data.forEach((item) => {
        doc.fontSize(12).text(
          `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${item.date.toISOString().slice(0, 10)} | ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ${item.studentId} | ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á: ${item.hours} | ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${item.activity}`
        );
      });

      doc.end();
    } else if (format === "excel") {
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet("Timesheet Report");

      worksheet.columns = [
        { header: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", key: "date", width: 15 },
        { header: "‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤", key: "studentId", width: 15 },
        { header: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", key: "hours", width: 10 },
        { header: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", key: "activity", width: 30 },
      ];

      data.forEach((item) => {
        worksheet.addRow({
          date: item.date.toISOString().slice(0, 10),
          studentId: item.studentId,
          hours: item.hours,
          activity: item.activity,
        });
      });

      res.setHeader("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
      res.setHeader("Content-Disposition", `attachment; filename=timesheet_${startDate}_${endDate}.xlsx`);
      await workbook.xlsx.write(res);
      res.end();
    }
  } catch (error) {
    logger.error(`‚ùå Export error: ${error.message}`);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

module.exports = router;
