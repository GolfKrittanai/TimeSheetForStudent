// routes/userRoutes.js (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)

const express = require("express");
const router = express.Router();

const prisma = require("../prismaClient");
const {
  authenticateToken,
  authorizeRoles,
} = require("../middleware/authMiddleware");

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin ‡πÅ‡∏•‡∏∞ Teacher)
// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô authorizeRoles ‡πÄ‡∏õ‡πá‡∏ô 'admin', 'teacher'
router.get(
  "/students",
  authenticateToken,
  authorizeRoles("admin", "teacher"),
  async (req, res) => {
    try {
      const users = await prisma.user.findMany({
        select: {
          id: true,
          studentId: true,
          fullName: true,
          role: true,
          createdAt: true,
          // ‚úÖ Fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AdminDashboard
          course: true,
          branch: true,
          semester: true,
          academicYear: true,
          companyName: true,
          internPosition: true,
          email: true,
          phone: true,
          _count: {
            select: {
              timesheet: true, // üî¥ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏à‡∏≤‡∏Å 'timesheets' ‡πÄ‡∏õ‡πá‡∏ô 'timesheet' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ PrismaClientValidationError
            },
          },
        },
        orderBy: {
          studentId: "asc",
        },
      });
      res.json(users);
    } catch (error) {
      console.error("‡πÇ‡∏´‡∏•‡∏î students error:", error);
      res
        .status(500)
        .json({
          message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
          error: error.message,
        });
    }
  }
);

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Admin ‡πÅ‡∏•‡∏∞ Teacher)
// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô authorizeRoles ‡πÄ‡∏õ‡πá‡∏ô 'admin', 'teacher' ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Security Check
router.put(
  "/:id",
  authenticateToken,
  authorizeRoles("admin", "teacher"),
  async (req, res) => {
    const { id } = req.params;
    const {
      fullName,
      studentId,
      role,
      course,
      branch,
      semester,
      academicYear,
      companyName,
      internPosition,
      email,
      phone,
    } = req.body;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° 'teacher' ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô validRoles
    const validRoles = ["student", "admin", "teacher"];

    if (role && !validRoles.includes(role)) {
      return res.status(400).json({ message: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á Admin ‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Admin ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    if (role && req.user.id === Number(id) && role !== "admin") {
      const adminCount = await prisma.user.count({ where: { role: "admin" } });
      if (adminCount <= 1) {
        return res
          .status(403)
          .json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á Admin ‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
      }
    }

    try {
      const updatedUser = await prisma.user.update({
        where: { id: Number(id) },
        data: {
          fullName,
          studentId,
          role,
          course,
          branch,
          semester,
          academicYear,
          companyName,
          internPosition,
          email,
          phone,
        },
        select: { id: true, fullName: true, role: true, studentId: true },
      });
      res.json(updatedUser);
    } catch (error) {
      if (error.code === "P2002") {
        // Unique constraint violation (studentId)
        return res
          .status(409)
          .json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
      }
      console.error("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ error:", error);
      res
        .status(500)
        .json({
          message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
          error: error.message,
        });
    }
  }
);

// ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Admin ‡πÅ‡∏•‡∏∞ Teacher)
// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô authorizeRoles ‡πÄ‡∏õ‡πá‡∏ô 'admin', 'teacher' ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° Security Check
router.delete(
  "/:id",
  authenticateToken,
  authorizeRoles("admin", "teacher"),
  async (req, res) => {
    const userId = Number(req.params.id);

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Admin ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (req.user.id === userId) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Admin ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const adminCount = await prisma.user.count({ where: { role: "admin" } });
      if (req.user.role === "admin" && adminCount <= 1) {
        return res
          .status(403)
          .json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Admin ‡∏Ñ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏î‡πâ" });
      }
    }

    try {
      await prisma.user.delete({ where: { id: userId } });
      res.json({ message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
    } catch (error) {
      if (error.code === "P2025") {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
      }
      console.error("‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ error:", error);
      res
        .status(500)
        .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", error: error.message });
    }
  }
);

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin Dashboard (Admin ‡πÅ‡∏•‡∏∞ Teacher)
// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô authorizeRoles ‡πÄ‡∏õ‡πá‡∏ô 'admin', 'teacher'
router.get(
  "/admin/summary",
  authenticateToken,
  authorizeRoles("admin", "teacher"),
  async (req, res) => {
    try {
      const studentCount = await prisma.user.count({
        where: { role: "student" },
      });
      const timesheetCount = await prisma.timesheet.count();

      res.json({
        totalStudents: studentCount,
        totalTimesheets: timesheetCount,
      });
    } catch (error) {
      console.error("‡πÇ‡∏´‡∏•‡∏î summary error:", error);
      res
        .status(500)
        .json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ", error: error.message });
    }
  }
);

// ‡∏î‡∏∂‡∏á Timesheet ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ô‡πÉ‡∏î‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á (Admin ‡πÅ‡∏•‡∏∞ Teacher)
// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô authorizeRoles ‡πÄ‡∏õ‡πá‡∏ô 'admin', 'teacher'
router.get(
  "/students/:id/timesheets",
  authenticateToken,
  authorizeRoles("admin", "teacher"),
  async (req, res) => {
    const userId = Number(req.params.id);
    try {
      const student = await prisma.user.findUnique({
        where: { id: userId },
        select: { studentId: true, fullName: true, companyName: true }, // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
      });

      if (!student) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤" });
      }

      const timesheets = await prisma.timesheet.findMany({
        where: { userId },
        orderBy: { date: "desc" },
      }); // ‚úÖ ‡∏™‡πà‡∏á Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô: student ‡πÅ‡∏•‡∏∞ timesheets

      res.json({ student, timesheets });
    } catch (error) {
      console.error("‡πÇ‡∏´‡∏•‡∏î timesheets ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ error:", error);
      res
        .status(500)
        .json({
          message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Timesheet ‡πÑ‡∏î‡πâ",
          error: error.message,
        });
    }
  }
);

module.exports = router;
