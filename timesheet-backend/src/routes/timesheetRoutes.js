const express = require('express');
const router = express.Router();

const prisma = require('../prismaClient');
const { authenticateToken, authorizeRoles } = require('../middleware/authMiddleware');
const logger = require('../logger/logger'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

// ‚úÖ ‡∏î‡∏∂‡∏á Timesheet ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤)
router.get('/', authenticateToken, authorizeRoles('student'), async (req, res) => {
  try {
    const timesheets = await prisma.timesheet.findMany({
      where: { userId: req.user.id },
      orderBy: { date: 'desc' },
    });

    logger.info(`üìÑ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id} ‡∏î‡∏∂‡∏á Timesheet ${timesheets.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    res.json(timesheets);
  } catch (error) {
    logger.error(`‚ùå ‡∏î‡∏∂‡∏á Timesheet ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î Timesheet', error: error.message });
  }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Timesheet
router.post('/', authenticateToken, authorizeRoles('student'), async (req, res) => {
  const { date, checkInTime, checkOutTime, activity } = req.body;

  try {
    const checkInDateTime = new Date(`${date}T${checkInTime}:00`);
    const checkOutDateTime = new Date(`${date}T${checkOutTime}:00`);

    const newTimesheet = await prisma.timesheet.create({
      data: {
        userId: req.user.id,
        date: new Date(date),
        checkInTime: checkInDateTime,
        checkOutTime: checkOutDateTime,
        activity,
      },
    });

    logger.info(`‚ûï ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id} ‡πÄ‡∏û‡∏¥‡πà‡∏° Timesheet ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${date}`);
    res.status(201).json(newTimesheet);
  } catch (error) {
    logger.error(`‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏° Timesheet ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Timesheet', error: error.message });
  }
});

// ‚úÖ ‡∏•‡∏ö Timesheet
router.delete('/:id', authenticateToken, authorizeRoles('student'), async (req, res) => {
  const id = parseInt(req.params.id);

  try {
    const timesheet = await prisma.timesheet.findUnique({ where: { id } });

    if (!timesheet || timesheet.userId !== req.user.id) {
      logger.warn(`‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö Timesheet ID ${id} ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á`);
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Timesheet ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö' });
    }

    await prisma.timesheet.delete({ where: { id } });

    logger.info(`üóëÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id} ‡∏•‡∏ö Timesheet ID ${id}`);
    res.json({ message: '‡∏•‡∏ö Timesheet ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' });
  } catch (error) {
    logger.error(`‚ùå ‡∏•‡∏ö Timesheet ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö Timesheet', error: error.message });
  }
});

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet
router.put('/:id', authenticateToken, authorizeRoles('student'), async (req, res) => {
  const { id } = req.params;
  const { date, checkInTime, checkOutTime, activity } = req.body;

  try {
    const timesheet = await prisma.timesheet.findUnique({
      where: { id: Number(id) },
    });

    if (!timesheet || timesheet.userId !== req.user.id) {
      logger.warn(`‚ö†Ô∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet ID ${id} ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á`);
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Timesheet ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
    }

    const checkInDateTime = new Date(`${date}T${checkInTime}:00`);
    const checkOutDateTime = new Date(`${date}T${checkOutTime}:00`);

    const updated = await prisma.timesheet.update({
      where: { id: Number(id) },
      data: {
        date: new Date(date),
        checkInTime: checkInDateTime,
        checkOutTime: checkOutDateTime,
        activity,
      },
    });

    logger.info(`‚úèÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${req.user.id} ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet ID ${id}`);
    res.json(updated);
  } catch (error) {
    logger.error(`‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet', error: error.message });
  }
});

module.exports = router;
