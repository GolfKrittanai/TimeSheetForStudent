const express = require('express');
const router = express.Router();
const prisma = require('../prismaClient');
const { authenticateToken, authorizeRoles } = require('../middleware/authMiddleware');
const { exportDailyForCron } = require('../controllers/exportController');
const logger = require('../logger/logger'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° logger

// üîπ Cron Export API (‡πÉ‡∏´‡πâ cron job ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å)
router.get('/export/daily', exportDailyForCron);

// üîπ ‡∏•‡∏ö Timesheet ‡πÇ‡∏î‡∏¢ admin
router.delete('/timesheet/:id', authenticateToken, authorizeRoles('admin'), async (req, res) => {
  const id = Number(req.params.id);
  const adminId = req.user.id;

  try {
    const timesheet = await prisma.timesheet.findUnique({ where: { id } });
    if (!timesheet) {
      logger.warn(`‚ö†Ô∏è Admin ${adminId} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö Timesheet ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö (id: ${id})`);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Timesheet' });
    }

    await prisma.timesheet.delete({ where: { id } });

    logger.info(`üóëÔ∏è Admin ${adminId} ‡∏•‡∏ö Timesheet (id: ${id}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    res.json({ message: '‡∏•‡∏ö Timesheet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (error) {
    logger.error(`‚ùå Admin ${adminId} ‡∏•‡∏ö Timesheet error: ${error.message}`);
    res.status(500).json({ message: '‡∏•‡∏ö Timesheet ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: error.message });
  }
});

// üîπ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet ‡πÇ‡∏î‡∏¢ admin
router.put('/timesheet/:id', authenticateToken, authorizeRoles('admin'), async (req, res) => {
  const id = Number(req.params.id);
  const adminId = req.user.id;
  const { date, checkInTime, checkOutTime, activity } = req.body;

  try {
    const timesheet = await prisma.timesheet.findUnique({ where: { id } });
    if (!timesheet) {
      logger.warn(`‚ö†Ô∏è Admin ${adminId} ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö (id: ${id})`);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Timesheet' });
    }

    const updated = await prisma.timesheet.update({
      where: { id },
      data: {
        date: new Date(date),
        checkInTime: new Date(checkInTime),
        checkOutTime: new Date(checkOutTime),
        activity,
      },
    });

    logger.info(`‚úèÔ∏è Admin ${adminId} ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet (id: ${id}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    res.json(updated);
  } catch (error) {
    logger.error(`‚ùå Admin ${adminId} ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet error: ${error.message}`);
    res.status(500).json({ message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timesheet ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: error.message });
  }
});

module.exports = router;
